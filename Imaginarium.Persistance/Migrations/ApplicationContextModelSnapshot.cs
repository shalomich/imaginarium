// <auto-generated />
using System;
using Imaginarium.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Imaginarium.Persistance.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CardDeck", b =>
                {
                    b.Property<int>("CardsId")
                        .HasColumnType("int");

                    b.Property<int>("DecksId")
                        .HasColumnType("int");

                    b.HasKey("CardsId", "DecksId");

                    b.HasIndex("DecksId");

                    b.ToTable("CardDeck");
                });

            modelBuilder.Entity("CardHand", b =>
                {
                    b.Property<int>("CardsId")
                        .HasColumnType("int");

                    b.Property<int>("HandsId")
                        .HasColumnType("int");

                    b.HasKey("CardsId", "HandsId");

                    b.HasIndex("HandsId");

                    b.ToTable("CardHand");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Association", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("NomineeId")
                        .HasColumnType("int");

                    b.Property<string>("Phrase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NomineeId")
                        .IsUnique()
                        .HasFilter("[NomineeId] IS NOT NULL");

                    b.HasIndex("RoundId")
                        .IsUnique();

                    b.ToTable("Association");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CollectionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("Name", "CollectionId")
                        .IsUnique()
                        .HasFilter("[CollectionId] IS NOT NULL");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Choice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElectionId")
                        .HasColumnType("int");

                    b.Property<int?>("GamerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.HasIndex("CardId", "ElectionId");

                    b.HasIndex("GamerId", "ElectionId");

                    b.ToTable("Choice");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Choice");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Name", "UserId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("Deck");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Election", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId")
                        .IsUnique();

                    b.ToTable("Election");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LobbyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LobbyId")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Gamer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPresenter")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Gamers");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Hand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GamerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GamerId")
                        .IsUnique();

                    b.ToTable("Hand");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Lobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CollectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("Lobbies");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("Number", "GameId")
                        .IsUnique();

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LobbyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LobbyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("GamerId")
                        .HasColumnType("int");

                    b.Property<int>("VotingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("VotingId");

                    b.HasIndex("GamerId", "VotingId");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Voting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId")
                        .IsUnique();

                    b.ToTable("Voting");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Nominee", b =>
                {
                    b.HasBaseType("Imaginarium.Domain.Entities.Choice");

                    b.HasDiscriminator().HasValue("Nominee");
                });

            modelBuilder.Entity("CardDeck", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Card", null)
                        .WithMany()
                        .HasForeignKey("CardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imaginarium.Domain.Entities.Deck", null)
                        .WithMany()
                        .HasForeignKey("DecksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CardHand", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Card", null)
                        .WithMany()
                        .HasForeignKey("CardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imaginarium.Domain.Entities.Hand", null)
                        .WithMany()
                        .HasForeignKey("HandsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Association", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Nominee", "Nominee")
                        .WithOne("Association")
                        .HasForeignKey("Imaginarium.Domain.Entities.Association", "NomineeId");

                    b.HasOne("Imaginarium.Domain.Entities.Round", "Round")
                        .WithOne("Association")
                        .HasForeignKey("Imaginarium.Domain.Entities.Association", "RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nominee");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Card", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Collection", "Collection")
                        .WithMany("Cards")
                        .HasForeignKey("CollectionId");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Choice", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imaginarium.Domain.Entities.Election", "Election")
                        .WithMany("Choices")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imaginarium.Domain.Entities.Gamer", "Gamer")
                        .WithMany()
                        .HasForeignKey("GamerId");

                    b.Navigation("Card");

                    b.Navigation("Election");

                    b.Navigation("Gamer");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Collection", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Deck", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Game", "Game")
                        .WithOne("Deck")
                        .HasForeignKey("Imaginarium.Domain.Entities.Deck", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Election", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Round", "Round")
                        .WithOne("Election")
                        .HasForeignKey("Imaginarium.Domain.Entities.Election", "RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Game", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Lobby", "Lobby")
                        .WithOne("Game")
                        .HasForeignKey("Imaginarium.Domain.Entities.Game", "LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lobby");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Gamer", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Game", "Game")
                        .WithMany("Gamers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imaginarium.Domain.Entities.User", "User")
                        .WithOne("Gamer")
                        .HasForeignKey("Imaginarium.Domain.Entities.Gamer", "UserName")
                        .HasPrincipalKey("Imaginarium.Domain.Entities.User", "Name")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Hand", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Gamer", "Gamer")
                        .WithOne("Hand")
                        .HasForeignKey("Imaginarium.Domain.Entities.Hand", "GamerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gamer");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Lobby", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Collection", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Round", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Game", "Game")
                        .WithMany("Rounds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.User", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Lobby", "Lobby")
                        .WithMany("Users")
                        .HasForeignKey("LobbyId");

                    b.Navigation("Lobby");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Vote", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Choice", "Choice")
                        .WithMany()
                        .HasForeignKey("ChoiceId");

                    b.HasOne("Imaginarium.Domain.Entities.Gamer", "Gamer")
                        .WithMany()
                        .HasForeignKey("GamerId");

                    b.HasOne("Imaginarium.Domain.Entities.Voting", "Voting")
                        .WithMany("Votes")
                        .HasForeignKey("VotingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Choice");

                    b.Navigation("Gamer");

                    b.Navigation("Voting");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Voting", b =>
                {
                    b.HasOne("Imaginarium.Domain.Entities.Round", "Round")
                        .WithOne("Voting")
                        .HasForeignKey("Imaginarium.Domain.Entities.Voting", "RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Collection", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Election", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Game", b =>
                {
                    b.Navigation("Deck");

                    b.Navigation("Gamers");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Gamer", b =>
                {
                    b.Navigation("Hand");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Lobby", b =>
                {
                    b.Navigation("Game");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Round", b =>
                {
                    b.Navigation("Association");

                    b.Navigation("Election");

                    b.Navigation("Voting");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.User", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("Gamer");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Voting", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Imaginarium.Domain.Entities.Nominee", b =>
                {
                    b.Navigation("Association");
                });
#pragma warning restore 612, 618
        }
    }
}
